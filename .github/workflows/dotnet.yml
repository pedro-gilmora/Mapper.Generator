name: 'SourceCrafter.MappingGenerator: Build, Test & Deploy'

on:
  push:
    branches: [ "**" ]

jobs:
  try-deliver:
    name: '.NET 8 Build, Test & Deploy'
    runs-on: 'ubuntu-latest'

    steps:

      - name: Get source code
        uses: actions/checkout@v3
        
      - name: Save GitHub Event Payload
        run: |
          cat <<EOF > github_event.json
          ${{ toJson(github.event) }}
          EOF

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: |
          dotnet restore

      - name: Test
        id: test
        run: |
          errors=$(dotnet test SourceCrafter.MappingGenerator.UnitTests/SourceCrafter.MappingGenerator.UnitTests.csproj --verbosity normal -c Release 2>&1)
          if [ $? -ne 0 ]; then
            echo $errors
            cat > errors.log << EOF
              Test Error: $errors
            EOF
          fi

      - name: Pack
        if: github.ref_name == 'dev'
        run: |
          created_year=$( date -d @${{ github.event.repository.created_at }} +%Y )
          version=""$(( $(date --date='now' +%Y) - $created_year )).$(date +%y).$(date +%j).$(( $(date +%H%M) / 5 ))""
          echo "VERSION=${version}" >> $GITHUB_ENV
          
          errors=$(dotnet pack SourceCrafter.MappingGenerator/SourceCrafter.Bindings.csproj --verbosity normal -c Pack /p:PackageVersion="$version" 2>&1)
          if [ $? -ne 0 ]; then
            echo $errors
            cat << EOF > errors.log
              Pack Error: $errors
            EOF
          fi

      - name: Publish to Nuget
        id: publish
        if: github.ref_name == 'dev' && startsWith(github.event.head_commit.message, '[Release]')
        run: |
          package="$(find . -wholename '**/Pack/*.nupkg' -exec echo "{}" \;)"         
          
          errors=$(dotnet nuget push $package --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json 2>&1)
          if [ $? -ne 0 ]; then
            echo $errors
            cat << EOF > errors.log
              Publish Error: $errors
            EOF
          fi

      - name: Notify Release to Github & Telegram
        if: always()
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # Load the event payload as JSON
          $githubEvent = @{}          
          if(Test-Path ./github_event.json) {
            $githubEvent = Get-Content -Path ./github_event.json -Raw | ConvertFrom-Json
          }
          else
          {
            echo "Not found github action file"
            return;
          }
          
          # Load errors from errors.log
          $errors = ""
          if (Test-Path ./errors.log) {
            $errors = $( Get-Content -Path ./errors.log )
          }
          
          echo $errors
          
          function escape {
            param (
                [string]$text
            )
            return $text -replace "([_\*\[\]\(\)~``>#\+\-=|{}\.!`"'])", '\$1'
          }
          
          function releaseTrimming {
            param (
              [string]$text
            )
            return $( $text -replace '^\[Release\]\s*', '' -replace '"', '\"' )
          }
          
          $isRelease = $githubEvent.head_commit.message -match '^\[Release\]\s*'
          $headCommit = releaseTrimming $githubEvent.head_commit.message
          $commits = $githubEvent.commits
          $failed = '${{ job.status }}' -eq 'failure'
          
          echo $commits

          $status, $icon, $message = if ($failed) {
            'failed', '💥', $errors
          } elseif ('${{ job.status }}' -eq 'success') {
            'successfully completed', '✅', $headCommit
          } else {
            'cancelled', '⛔', 'User aborted the action'
          }
          
          $message = @"
          🚀 *$(escape '${{ github.workflow }}')* \#1 Build $status $icon
          👤 *Triggered by:* $( escape "${{ github.triggering_actor }}" )
          🌿 *Branch:* $( escape "${{ github.ref_name }}" )
          🔗 *Change:* *[$( $githubEvent.head_commit.id.Substring(0,8) )]($( escape $githubEvent.head_commit.url ))*
  
          *$(escape $headCommit)*
  
          $(if($commits.Length -gt 1) {
            [string]::Join("
            ", $( $commits | Select -Skip 1 | ForEach-Object { "[$($_.id.Substring(0,8))]($(escape $_.url)): $(escape $( releaseTrimming $_.message ) )
            by [$(escape $_.author.username)]( $(escape https://github.com/$($_.author.username)) )" }))
          })
          
          $( if($errors) { ``*$(escape $errors)*`` } )
          "@.Trim()
          
          Write-Host $message

          $uri = "https://api.telegram.org/bot${{ secrets.TGBOT_TOKEN }}/sendMessage"

          $body = @{
            chat_id = ${{ secrets.SC_CHATID }}
            text    = $message
            parse_mode = 'MarkdownV2'
            message_thread_id = 4
          }
  
          Invoke-RestMethod -Uri $uri -Method Post -Body $body
