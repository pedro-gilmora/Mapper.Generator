name: 'SourceCrafter.Mapifier: Build, Test & Deploy'

on:
  push:
    branches: [ "**" ]

jobs:
  try-deliver:
    name: '.NET 8 Build, Test & Deploy'
    runs-on: 'ubuntu-latest'

    steps:

      - name: Get source code
        uses: actions/checkout@v3
        
      - name: Save GitHub Event Payload
        run: |
          cat <<EOF > github_event.json
          ${{ toJson(github.event) }}
          EOF

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: |
          output=$(dotnet restore SourceCrafter.appify/SourceCrafter.Mappify.csproj | awk '/: error / { print }')
          
          if [ "${#output}" -ne 0 ]; then
            echo -e "Test errors:
          $output" >> errors.log
          fi
          
          output=$(dotnet restore SourceCrafter.appingGenerator.UnitTests/SourceCrafter.MappingGenerator.UnitTests.csproj | awk '/: error / { print }')
          
          if [ "${#output}" -ne 0 ]; then
            echo -e "Test errors:
          $output" >> errors.log
          fi     

      - name: Test
        id: test
        run: |
          output=$(dotnet test SourceCrafter.appingGenerator.UnitTests/SourceCrafter.MappingGenerator.UnitTests.csproj -c Release | awk '/: error / { print }')
  
          if [ "${#output}" -ne 0 ]; then
            echo -e "Test errors:
          $output" >> errors.log
          fi

      - name: Pack
        if: github.ref_name == 'dev'
        run: |
          created_year=$( date -d @${{ github.event.repository.created_at }} +%Y )
          version=""$(( $(date --date='now' +%Y) - $created_year )).$(date +%y).$(date +%j).$(( $(date +%H%M) / 5 ))""
          echo "VERSION=${version}" >> $GITHUB_ENV
          
          output=$(dotnet pack SourceCrafter.appify/SourceCrafter.Mappify.csproj --verbosity normal -c Pack /p:PackageVersion="$version" | awk '/: error / { print }')
          
          if [ "${#output}" -ne 0 ]; then
            echo -e "Pack errors:
          $output" >> errors.log
          fi

      - name: Publish to Nuget
        id: publish
        if: github.ref_name == 'dev' && startsWith(github.event.head_commit.message, '[Release]')
        run: |
          package="$(find . -wholename '**/Pack/*.nupkg' -exec echo "{}" \;)"
          
          output=$(dotnet nuget push $package --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json | awk '/: error / { print }')
          
          if [ "${#output}" -ne 0 ]; then
            echo -e "Publish errors:
          $output" >> errors.log
          fi

      - name: Notify Release to Github & Telegram
        if: always()
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # Load the event payload as JSON
          $githubEvent = @{}          
          if(Test-Path ./github_event.json) {
            $githubEvent = Get-Content -Path ./github_event.json -Raw | ConvertFrom-Json
          }

          # Load errors from errors.log
          $errors = ""
          if (Test-Path "./errors.log") {
            echo "Found errors log file"
            $errors = $( Get-Content -Path "./errors.log" )
          }

          echo "These are the errors: [$errors]"

          function escape ([string] $text) 
          {
            return $text -replace "([_\*\[\]\(\)~``>#\+\-=|{}\.!`"'])", '\$1'
          }

          function releaseTrimming ([string] $text) 
          {
            return $text -replace '^\[Release\]\s*', '' -replace '"', '\"'
          }

          $isRelease = $githubEvent.head_commit.message -match '^\[Release\]\s*'
          $headCommit = releaseTrimming $githubEvent.head_commit.message
          $commits = [System.Collections.Stack]::new( $githubEvent.commits )
          $failed = '${{ job.status }}' -eq 'failure'

          #echo $commits

          $status, $icon, $message = if ($failed -or $errors) {
            'failed', '💥', $errors
          } elseif ('${{ job.status }}' -eq 'success') {
            'successfully completed', '✅', $headCommit
          } else {
            'cancelled', '⛔', 'User aborted the action'
          }

          $message = @"
          🚀 *$(escape '${{ github.workflow }}')* \#${{ github.run_number }} Build $status $icon
          👤 *Triggered by:* [$( escape "${{ github.triggering_actor }}" )](https://github.com/$( escape "${{ github.triggering_actor }}" ))
          🌿 *Branch:* $( escape "${{ github.ref_name }}" )
          🔗 *Change:* *[$( $githubEvent.head_commit.id.Substring(0,8) )]($( escape $githubEvent.head_commit.url ))*
  
          *$(escape ( releaseTrimming $githubEvent.head_commit.message) )*$(if($commits.Count -gt 1 ) { "
          
          $([string]::Join("
          ", $( $commits | 
          Select -Skip 1 | 
          ForEach-Object { 
              "🔹[$($_.id.Substring(0,8))]($(escape $_.url)): $(escape ( releaseTrimming $_.message ) )
            by [$(escape $_.author.username)]($( escape https://github.com/$($_.author.username) ))"
          })))"
          })$( if($errors) { "
          
          ``````
          $( escape $errors.Trim() )
          ``````" } )
          "@
          
          if( $isRelease -and -not $failed ) 
          {
            gh release create v${{ env.VERSION }} -t "$(releaseTrimming $githubEvent.head_commit.message)" -n $(if($commits.Count -gt 1) { "| ID | Message | Author |
            |---|---|---|
            $([string]::Join("
          ", $( $commits | 
              Select -Skip 1 | 
              ForEach-Object { 
                "| [$($_.id.Substring(0,8))]($($_.url)) | $( releaseTrimming $_.message ) | [$( $_.author.username )]( https://github.com/$($_.author.username) ) |"
            })))"
            } else { "" }) 
          }
  
          Write-Host $message

          $uri = "https://api.telegram.org/bot${{ secrets.TGBOT_TOKEN }}/sendMessage"

          $body = @{
            chat_id = ${{ secrets.SC_CHATID }}
            text = $message
            parse_mode = 'MarkdownV2'
            message_thread_id = 4
          }

          Invoke-RestMethod -Uri $uri -Method Post -Body $body
