name: 'SourceCrafter.MappingGenerator: Build, Test & Deploy'

on:
  push:
    branches: [ "**" ]

jobs:
  try-deliver:
    name: '.NET 7 Build, Test & Deploy'
    runs-on: 'ubuntu-latest'

    steps:      
    - name: Get source code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Test
      run: dotnet test SourceCrafter.MappingGenerator.UnitTests/SourceCrafter.MappingGenerator.UnitTests.csproj --verbosity normal -c Release

    - name: Pack
      if: github.ref_name == 'dev'
      run: |
        without_comma=$(echo "${{ github.event.head_commit.message }}" | sed 's/,/\\u002C/g')
        dotnet pack SourceCrafter.MappingGenerator/SourceCrafter.Bindings.csproj --verbosity normal -c Pack /p:PackageReleaseNotes="$without_comma"
    
    - name: Publish to Nuget
      if: github.ref_name == 'dev'
      run: |
        package="$(find . -wholename '**/Pack/*.nupkg' -exec echo "{}" \;)"
        dotnet nuget push $package --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

    - name: Notify Release to Github & Telegram
      if: always()
      shell: pwsh      
      run: |  
        function escape {
          param (
            [string]$text
          )

          return $text -replace '([_\*\[\]\(\)~`>#\+\-=|{}\.!])', '\$1'
        }

        $id = '${{ github.sha }}'.Substring(0,8)

        $status, $icon, $message = if ('${{ job.status }}' -eq 'failure') { 
          'failed', '💥', "Errors: ${{ steps.build.outputs.errors }}
            ${{ steps.build.publish.errors }}".Trim()
        } elseif ('${{ job.status }}' -eq 'success') { 
          'successfully completed', '✅', $(escape "${{ github.event.head_commit.message }}
        $([string]::Join(" 
        ", $(${{ github.event.commits }} | Select -Skip 1 | ForEach-Object { "● $_.message" })))") 
        } else { 
          'cancelled', '⛔', 'User aborted the action' 
        }

        $message = @"
        🚀$icon *$(escape '${{ github.workflow }}')* #${{ github.run_number }} Build $status
        👤 *Triggered by:* $(escape '${{ github.actor }}')
        🌿 *Branch:* $(escape '${{ github.ref }}')
        🔗 *Change:* [``$id``] 
        $(escape '$message')"

        $uri = "https://api.telegram.org/bot${{ secrets.TGBOT_TOKEN }}/sendMessage"

        $body = @{
          chat_id = ${{ secrets.SC_CHATID }}
          text    = $message
          parse_mode = 'MarkdownV2'
          message_thread_id = 4
        }

        Invoke-RestMethod -Uri $uri -Method Post -Body $body
