name: 'SourceCrafter.MappingGenerator: Build, Test & Deploy'

on:
  push:
    branches: [ "**" ]

jobs:
  try-deliver:
    name: '.NET 7 Build, Test & Deploy'
    runs-on: 'ubuntu-latest'

    steps:      
    - name: Get source code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Test
      id: test
      continue-on-error: true
      run: |        
        errors=$(dotnet test SourceCrafter.MappingGenerator.UnitTests/SourceCrafter.MappingGenerator.UnitTests.csproj --verbosity normal -c Release 2>&1)
        if [ $? -ne 0 ]; then
          echo "$output"
          echo "::set-output name=output::$errors"
        fi

    - name: Pack
      if: github.ref_name == 'dev'
      run: |
        created_year=$( date -d @${{ github.event.repository.created_at }} +%Y )
        version=""$(( $(date --date='now' +%Y) - $created_year )).$(date +%y).$(date +%j).$(( $(date +%H%M) / 5 ))""
        echo "VERSION=${version}" >> $GITHUB_ENV

        errors=$(dotnet pack SourceCrafter.MappingGenerator/SourceCrafter.Bindings.csproj --verbosity normal -c Pack /p:PackageVersion="$version" 2>&1)
        if [ $? -ne 0 ]; then
          echo "$errors"
          echo "::set-output name=output::$errors"
        fi
    
    - name: Publish to Nuget
      id: publish
      if: github.ref_name == 'dev' && startsWith(github.event.head_commit.message, '[Release]')
      continue-on-error: true
      run: |
        package="$(find . -wholename '**/Pack/*.nupkg' -exec echo "{}" \;)"
        dotnet nuget push $package --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        
    - name: Notify Release to Github & Telegram
      if: always()
      shell: pwsh
      env:        
         GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
        function escape {
          param (
              [string]$text
          )
          return $text -replace "([_\*\[\]\(\)~``>#\+\-=|{}\.!`"'])", '\$1'
        }

        function releaseTrimming {
          param (
            [string]$text
          )
          return $( $text -replace '^\[Release\]\s*', '' -replace '"' '\"' )
        }

        $isRelease = "${{ github.event.head_commit.message }}" -match '^\[Release\]\s*'

        $headCommit = $( releaseTrimming "${{ github.event.head_commit.message }}" )

        $commits = "${{ toJson(github.event.commits) }}".Replace('"', '\"') | ConvertFrom-Json
        
        $failed = '${{ job.status }}' -eq 'failure'
        
        $status, $icon, $message = if ($failed) { 
          'failed', '💥', "Errors: 
          Build errors: ${{ steps.build.outputs.errors }}
          Pack errors: ${{ steps.pack.outputs.errors }}
          Publish errors: ${{ steps.publish.outputs.errors }}".Replace("'", "\'").Trim()
        } elseif ('${{ job.status }}' -eq 'success') { 
          'successfully completed', '✅', $headCommit 
        } else { 
          'cancelled', '⛔', 'User aborted the action' 
        }
        
        $message = @"
        🚀 *$(escape '${{ github.workflow }}')* \#1 Build $status $icon
        👤 *Triggered by:* $(escape 'pedro-gilmora')
        🌿 *Branch:* ${{ github.ref_name }}
        🔗 *Change:* *[ $( "${{ github.event.head_commit.id }}".Substring(0,8) ) ]( $(escape "https://github.com/${{ github.event.head_commit.author.username }}") )*

        *$(escape $headCommit)*

        $(if($commits.Length -gt 1) { 
        [string]::Join(" 
        ", $( $commits | Select -Skip 1 | ForEach-Object { "[$($_.id.Substring(0,8))]($(escape $_.url)): $(escape $( releaseTrimming $_.message ) )
          by [$(escape $_.author.username)]( $(escape https://github.com/$($_.author.username)) )" }))
        })
        "@.Trim()

        Write-Host $message

        $uri = "https://api.telegram.org/bot${{ secrets.TGBOT_TOKEN }}/sendMessage"

        $body = @{
            chat_id = ${{ secrets.SC_CHATID }}
            text    = $message
            parse_mode = 'MarkdownV2'
            message_thread_id = 4
        }

        Invoke-RestMethod -Uri $uri -Method Post -Body $body

        if( $isRelease -and -not $failed)
        {
            $message = $(if($commits.Length -gt 1) { 
        "| Commit    | Message              | Author         |
         |-----------|----------------------|----------------|
        " +
        [string]::Join("
        ", $( $commits | Select-Object -Skip 1 | ForEach-Object { "| [$($_.id.Substring(0,8))]($_.url)) | $( releaseTrimming $_.message ) | [$($_.author.username)](https://github.com/$($_.author.username))" }))} 
        else { "" }).Trim()

            gh release create "v${{ env.VERSION }}" --latest --title "$headCommit" --notes "$message"
        }